#include<iostream>
#include<climits>
using namespace std;
//to update the whole range
//update range is not working due to unknown reasons
void updaterange(int *tree,int ss,int se,int l,int r,int increment,int index)
{
    //no overlap
    if(l>se||r<ss)
    {
        return;
    }
    //leaf node
    if(ss=se)
    {
        tree[index]+= increment;
        return;
    }
    //there we will not stop at complete overlap
    //now for partial overlap
    int mid=(ss+se)/2;
    updaterange(tree,ss,mid,l,r,increment,2*index);
    updaterange(tree,mid+1,se,l,r,increment,2*index+1);
    tree[index]=min(tree[2*index],tree[2*index+1]);
    return;
}
//to update an element in array
void update(int *tree,int ss,int se,int i,int increment,int index)
{
    //if not in range
    if(i<ss||i>se)
    {
        return;
    }
    //leaf node
    if(ss==se)
    {
        tree[index]+=increment;
        return;
    }
    //updating minimum in other nodes
    int mid=(ss+se)/2;
    update(tree,ss,mid,i,increment,index*2);
    update(tree,mid+1,se,i,increment,index*2+1);
    tree[index]=min(tree[index*2],tree[index*2+1]);
    return;
}
//to find minimum element between a range in an array in log n time
int querry(int *tree,int ss,int se,int qs,int qe,int i)
{
    //no overlap
    if(qe<ss||qs>se)
        return INT_MAX;
    //complete overlap
    if(ss>=qs&&se<=qe)
        return tree[i];
    //partial overlap
    int mid=(ss+se)/2;
    int left=querry(tree,ss,mid,qs,qe,i*2);
    int right=querry(tree,mid+1,se,qs,qe,i*2+1);
    return min(left,right);
}
//to build a segment tree from an array
void buildtree(int *a,int s,int e,int *tree,int i)
{
    //base case
    if(s==e)
    {
        tree[i]=a[s];
        return;
    }
    //recursive case
    int mid=(s+e)/2;
    buildtree(a,s,mid,tree,2*i);
    buildtree(a,mid+1,e,tree,2*i+1);
    tree[i]=min(tree[2*i],tree[2*i+1]);
    return;
}
int main(void)
{
    int a[]={1,3,2,-5,6,4};
    int n=sizeof(a)/sizeof(a[0]);
    int tree[4*n+1];
    buildtree(a,0,n-1,tree,1);
    for(int i=1;i<=13;i++)
    {
      //  cout<<tree[i]<<" ";
    }
    //int l,r;
    //cin>>l>>r;
    //cout<<querry(tree,0,n-1,l,r,1);
      update(tree,0,n-1,3,10,1);
      update(tree,0,n-1,4,-9,1);
    //updaterange(tree,0,n-1,3,4,10,1);
    int no=7;
    while(no--)
    {
    int l,r;
    cin>>l>>r;
    cout<<querry(tree,0,n-1,l,r,1)<<endl;
    }
}
